${THIS_NAME} [-s SEX] [-fbperFBPER COND] ...
  日本人の名字でなく名前を指定した条件で抽出する。条件の引数値に漢字があるなら名字の「表記」、なければ「読み」の条件値として判定する。条件指定方法は6種（なし、前方一致、後方一致、部分一致、完全一致、正規表現）。複数指定するとANDになる。
parameters:
  -s 性別。指定した性別のみ抽出する。
       * :すべて（性別による制約なし）。デフォルト値である。
       m :「読み」と「表記」が男っぽい
       f :「読み」と「表記」が女っぽい
       c :「読み」と「表記」が男女共ありうる
       mc:「読み」は男、「表記」は共
       fc:「読み」は女、「表記」は共
       cm:「読み」は共、「表記」は男
       cf:「読み」は共、「表記」は女
       M : 男としてありうる（m + mc + cm + c）
       F : 女としてありうる（f + fc + cf + c）
       C : 性別が判別しづらい（c + mc + cm + fc + cf）
  -f 　前方一致 名字の読みか表記に対して前方一致した名字のみ抽出する
  -b 　後方一致 名字の読みか表記に対して後方一致した名字のみ抽出する
  -p 　部分一致 名字の読みか表記に対して部分一致した名字のみ抽出する
  -e 　完全一致 名字の読みか表記に対して完全一致した名字のみ抽出する
  -r 　正規表現 名字の読みか表記に対して正規表現に一致した名字のみ抽出する
  -F 非前方一致 名字の読みか表記に対して前方一致しない名字のみ抽出する
  -B 非後方一致 名字の読みか表記に対して後方一致しない名字のみ抽出する
  -P 非部分一致 名字の読みか表記に対して部分一致しない名字のみ抽出する
  -E 非完全一致 名字の読みか表記に対して完全一致しない名字のみ抽出する
  -R 非正規表現 名字の読みか表記に対して正規表現に一致しない名字のみ抽出する
database: ${APP_ROOT}/dic/
ccondition examples:
  -f 'たろ'         　前方一致,読み,\$1  ~ /^たろ.*$/
  -f '太'           　前方一致,表記,\$2  ~ /^赤.*$/
  -F 'たろ'         非前方一致,読み,\$1 !~ /^たろ.*$/
  -F '太'           非前方一致,表記,\$2 !~ /^赤.*$/

  -b 'ろう'         　後方一致,読み,\$1  ~ /.*ろう$/
  -b '郎'           　後方一致,表記,\$2  ~ /.*郎$/
  -B 'ろう'         非後方一致,読み,\$1 !~ /.*ろう$/
  -B '郎'           非後方一致,表記,\$2 !~ /.*郎$/

  -p 'たろ'         　部分一致,読み,\$1  ~ /たろ/
  -p '太'           　部分一致,表記,\$2  ~ /太/
  -P 'たろ'         非部分一致,読み,\$1 !~ /たろ/
  -P '太'           非部分一致,表記,\$2 !~ /太/

  -e 'たろう'       　完全一致,読み,\$1  ~ /^たろう$/
  -e '太郎'         　完全一致,表記,\$2  ~ /^太郎$/
  -E 'たろう'       非完全一致,読み,\$1 !~ /^たろう$/
  -E '太郎'         非完全一致,表記,\$2 !~ /^太郎$/

  -r '^たろ.{1,}'   　正規表現,読み,\$1  ~ /^あか.{1,}/
  -r '^太.{1,}'     　正規表現,表記,\$2  ~ /^赤.{1,}/
  -R '^たろ.{1,}'   非正規表現,読み,\$1 !~ /^あか.{1,}/
  -R '^太.{1,}'     非正規表現,表記,\$2 !~ /^赤.{1,}/
example:
  ${THIS_NAME} -f 'たろ'
  ${THIS_NAME} -b 'ろう'
  ${THIS_NAME} -p 'ろ'
  ${THIS_NAME} -e 'たろう'
  ${THIS_NAME} -r '.*(すけ|たろう|へい|べい|ぺい|へえ|べえ|ぺえ)$'
  ${THIS_NAME} -f '太'
  ${THIS_NAME} -b '郎'
  ${THIS_NAME} -p '々'
  ${THIS_NAME} -e '太郎'
  ${THIS_NAME} -r '^太.{1,}$'

  ${THIS_NAME} -F 'たろ'
  ${THIS_NAME} -B 'ろう'
  ${THIS_NAME} -P 'かさ'
  ${THIS_NAME} -E 'たろう'
  ${THIS_NAME} -R '.*(すけ|たろう|へい|べい|ぺい|へえ|べえ|ぺえ)$'
  ${THIS_NAME} -F '太'
  ${THIS_NAME} -B '郎'
  ${THIS_NAME} -P '々'
  ${THIS_NAME} -E '太郎'
  ${THIS_NAME} -R '^太.{1,}$'

  ${THIS_NAME} -f 'たろ' -B 'ろう'
  ${THIS_NAME} -f '太' -B '郎'
  ${THIS_NAME} -f 'たろ' -B 'ろう' -f '太' -B '郎'
linux command examples:
  DB=${APP_ROOT}/dic/yk/oo/m.tsv
  cat \"\$DB\" | awk -F \"\\t\" \$1  ~ /ろう/
  cat \"\$DB\" | awk -F \"\\t\" \$1 !~ /ろう/
  cat \"\$DB\" | awk -F \"\\t\" \$2  ~ /太/
  cat \"\$DB\" | awk -F \"\\t\" \$1  ~ /^たろ.*/
  cat \"\$DB\" | awk -F \"\\t\" \$1  ~ /.*ろう$/
  cat \"\$DB\" | awk -F \"\\t\" \$1  ~ /^たろう$/
  cat \"\$DB\" | awk -F \"\\t\" \$1 ~ /^たろ.*/ && \$2 ~ /^太.*/
  cat \"\$DB\" | awk -F \"\\t\" { print \$0 }
